// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model ContactUs{
   id          Int      @id @default(autoincrement())
   name        String
   email       String
   message     String
   createdAt DateTime @default(now())
}

model collaborationOpportunity {
  id          Int      @id @default(autoincrement())
  Fullname    String
  email       String
  Phonenumber String
  type        String
  category    String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Subscriber {
  id    Int    @id @default(autoincrement())
  email String @unique
  status Boolean  @default(true) 
}

model event {
  id          Int                  @id @default(autoincrement())
  name        String
  description String
  targetDate  DateTime
  category    String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  contests    contestParticipant[] @relation("EventContests") // Relation to contestParticipant
  expos       expoParticipant[]    @relation("EventExpos") // Relation to expoParticipant
}

model project {
  id                 Int      @id @default(autoincrement())
  projectTitle       String
  projectDescription String
  techStack          String?
  projectUrl         String?
  websiteUrl         String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  //relation with contest participant 
  contestParticipant contestParticipant?

  //relation with expo participant 
  expoParticipant expoParticipant?
}

model contestParticipant {
  id              Int    @id @default(autoincrement())
  teamName        String
  numberOfMembers Int
  eventId         Int

  // Relation to event
  event event @relation("EventContests", fields: [eventId], references: [id])

  // Relation to the team leader contact info
  contactInfo ContactInfo[] // One-to-Many: Multiple ContactInfo

  // Relation to the team members
  members TeamMember[]

  //Relation to project
  projectId Int     @unique
  project   project @relation(fields: [projectId], references: [id])

  // relation with personalInfo
  leadrepersonalInfoId Int          @unique
  personalInfo         PersonalInfo @relation(fields: [leadrepersonalInfoId], references: [id])
}

//contest team members
model TeamMember {
  id          Int           @id @default(autoincrement())
  contactInfo ContactInfo[] // One-to-Many: Multiple ContactInfo

  // Foreign key to the contestParticipant
  teamId Int
  Team   contestParticipant @relation(fields: [teamId], references: [id])

  // relation with personalInfo
  teammemberpersonalInfo Int          @unique
  personalInfo           PersonalInfo @relation(fields: [teammemberpersonalInfo], references: [id])
}

model expoParticipant {
  id              Int      @id @default(autoincrement())
  companyName     String?
  jobTitle        String?
  participantType String
  haveateam       Boolean?

  eventId Int // Foreign key to event
  event   event @relation("EventExpos", fields: [eventId], references: [id])

  contactInfo ContactInfo[] // One-to-Many: Multiple ContactInfo

  // Relation to the expo team members
  members expoMembers[]

   //Relation to project
  projectId       Int? @unique
  project        project?         @relation(fields: [projectId], references: [id])       
 

  // relation with personalInfo
  personalInfoId Int          @unique
  personalInfo   PersonalInfo @relation(fields: [personalInfoId], references: [id])

  //relation to setupRequirements

    setupId       Int? @unique
    setupRequirements  setupRequirements?    @relation(fields: [setupId], references: [id])

    // relation with presentation
    presentationId       Int? @unique
    presentation         presentation?         @relation(fields: [presentationId], references: [id])
    
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

//expo team members

model expoMembers {
  id          Int           @id @default(autoincrement())
  contactInfo ContactInfo[] // One-to-Many: Multiple ContactInfo

  // Foreign key to the expoParticipant
  teamId                 Int
  Team                   expoParticipant @relation(fields: [teamId], references: [id])
  // relation with personalInfo
  teammemberpersonalInfo Int             @unique
  personalInfo           PersonalInfo    @relation(fields: [teammemberpersonalInfo], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model setupRequirements {
  id              Int              @id @default(autoincrement())
  description     String
  expoParticipant expoParticipant?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model presentation {
  id                   Int    @id @default(autoincrement())
  presentationTitle    String
  presentationAbstract String

  // Foreign key to the expoParticipant
  expoParticipant expoParticipant?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//  Design for collaboration opportunities
//  One to Many: One PersonalInfo can have multiple ContactInfo records
//  One to Many: One PersonalInfo can have multiple AddressInfo records
//  One to Many: One PersonalInfo can have multiple DocumentInfo records
//  One to Many: One OrganizationInfo can have multiple ContactInfo records
//  One to Many:One OrganizationInfo can have multiple AddressInfo records
//  One to Many: One OrganizationInfo can have multiple DocumentInfo records
//  Many to One: Each DocumentInfo record can reference either PersonalInfo or OrganizationInfo
//  One to one : One PersonalInfo can only have One OrganizationInfo 

model ContactInfo {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  phoneNumberOne String
  phoneNumberTwo String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Foreign keys for relationships
  personalInfoId     Int?
  personalInfo       PersonalInfo?     @relation(fields: [personalInfoId], references: [id]) // Many-to-One: Links to PersonalInfo
  organizationInfoId Int?
  organizationInfo   OrganizationInfo? @relation(fields: [organizationInfoId], references: [id]) // Many-to-One: Links to OrganizationInfo
  MediaInfoId        Int?
  MediaInfo          MediaInfo?        @relation(fields: [MediaInfoId], references: [id]) // Many-to-One: Links to OrganizationInfo

  // Relations
  TeamLeaderId Int?
  TeamLeader   contestParticipant? @relation(fields: [TeamLeaderId], references: [id])

  TeamMemberId Int?
  TeamMember   TeamMember? @relation(fields: [TeamMemberId], references: [id])

  expoTeamMemberId Int?
  expoTeamMember   expoMembers? @relation(fields: [expoTeamMemberId], references: [id])

  TechexpoId Int?
  Techexpo   expoParticipant? @relation(fields: [TechexpoId], references: [id])

  startupInfoId Int?
  startupInfo   startupInfo? @relation(fields: [startupInfoId], references: [id])
}

model AddressInfo {
  id          Int      @id @default(autoincrement())
  city        String
  state       String
  country     String
  addressType String // e.g., "Residential", "Business"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign keys for relationships
  personalInfoId     Int?
  personalInfo       PersonalInfo?     @relation(fields: [personalInfoId], references: [id]) // One-to-Many: Links to PersonalInfo
  organizationInfoId Int?
  organizationInfo   OrganizationInfo? @relation(fields: [organizationInfoId], references: [id]) // One-to-Many: Links to OrganizationInfo
  MediaInfoId        Int?
  MediaInfo          MediaInfo?        @relation(fields: [MediaInfoId], references: [id]) // Many-to-One: Links to OrganizationInfo
}

model OrganizationInfo {
  id               Int      @id @default(autoincrement())
  organizationName             String
  industry         String // Industry of the organization
  focusArea        String // e.g., "AI", "FinTech", "AgroTech"
  interestArea     String? // e.g., "Invest", "Support"
  tradeLicense     String?
  organizationType String // e.g., "NGO", "Private", "Government"
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  contactInfo  ContactInfo[] // One-to-Many: Multiple ContactInfo
  addressInfo  AddressInfo[] // One-to-Many: Multiple AddressInfo
  documentInfo DocumentInfo[] // One-to-Many: Multiple DocumentInfo
  PersonalInfo PersonalInfo?
}

model PersonalInfo {
  id        Int      @id @default(autoincrement())
  title     String?
  firstName String
  lastName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  contactInfo        ContactInfo[] // One-to-Many: Multiple ContactInfo
  addressInfo        AddressInfo[] // One-to-Many: Multiple AddressInfo
  documentInfo       DocumentInfo[] // One-to-Many: Multiple DocumentInfo
  organizationInfo   OrganizationInfo? @relation(fields: [organizationInfoId], references: [id]) // One-to-One: OrganizationInfo
  organizationInfoId Int?              @unique // Foreign key to OrganizationInfo

  TrainerInfo TrainerInfo?

  IndependentPartnerInfo IndependentPartnerInfo?

  //relation with team members
  teamMembers TeamMember?

  //relation with expo team members
  expoteamMembers expoMembers?

  //relation with contestParticipant
  contestParticipant contestParticipant?

  //relation with expoParticipant
  expoParticipant expoParticipant?

//relation with proposals
  startupInfoId Int?
  startupInfo   startupInfo? @relation(fields: [startupInfoId], references: [id])
}
model startupInfo {
  id         Int      @id @default(autoincrement())
  startupName String
  stage      String
  ideaDescription String?

  //relation with video
  videoId Int? @unique
  VideoInfo   VideoInfo? @relation(fields: [videoId], references: [id])

  documents  DocumentInfo[] // Relation to the documents

  contactInfo ContactInfo[] // One-to-Many: Multiple ContactInfo

  //relation with personal info
  personalInfo PersonalInfo[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

}

model DocumentInfo {
  id             Int       @id @default(autoincrement())
  name   String 
  documentNumber String?
  path String
  issuedDate     DateTime?
  expirationDate DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Foreign keys for relationships with either PersonalInfo or OrganizationInfo
  personalInfoId     Int?
  personalInfo       PersonalInfo?     @relation(fields: [personalInfoId], references: [id]) // Many-to-One: PersonalInfo reference
  organizationInfoId Int?
  organizationInfo   OrganizationInfo? @relation(fields: [organizationInfoId], references: [id]) // Many-to-One: OrganizationInfo reference
  MediaInfoId        Int?
  MediaInfo          MediaInfo?        @relation(fields: [MediaInfoId], references: [id]) // Many-to-One: Links to OrganizationInfo
  TrainerInfoId      Int?
  TrainerInfo        TrainerInfo?      @relation(fields: [TrainerInfoId], references: [id])

  IndependentPartnerInfoId Int?
  IndependentPartnerInfo   IndependentPartnerInfo? @relation(fields: [IndependentPartnerInfoId], references: [id])

  startupInfoId Int?
  startupInfo  startupInfo? @relation(fields: [startupInfoId], references: [id])
  
}
model VideoInfo {
  id        Int     @id @default(autoincrement())
  name      String
  path      String  // Assuming video is stored as a URL
  startupInfo  startupInfo? 
}

model MediaInfo {
  id           Int      @id @default(autoincrement())
  mediaName    String
  description  String
  platform     String //radio, youtube,TV
  contentGenre String // e.g., "report", "podcast", "others"
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  contactInfo  ContactInfo[] // One-to-Many: Multiple ContactInfo
  addressInfo  AddressInfo[] // One-to-Many: Multiple AddressInfo
  documentInfo DocumentInfo[] // One-to-Many: Multiple DocumentInfo
}

model TrainerInfo {
  id         Int      @id @default(autoincrement())
  title      String?
  profession String
  expertise  String
  schedule   String
  motivation String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  // Relationships
  personalInfo   PersonalInfo?  @relation(fields: [personalInfoId], references: [id]) // One-to-One: Personal Info
  personalInfoId Int?           @unique
  documentInfo   DocumentInfo[] // One-to-Many: Multiple DocumentInfo
}

model IndependentPartnerInfo {
  id           Int      @id @default(autoincrement())
  focusArea    String // e.g., "AI", "FinTech", "AgroTech"
  interestArea String // e.g., "Invest", "Support"
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  // Relationships
  personalInfo   PersonalInfo?  @relation(fields: [personalInfoId], references: [id]) // One-to-One: Personal Info
  personalInfoId Int?           @unique
  documentInfo   DocumentInfo[] // One-to-Many: Multiple DocumentInfo
}
