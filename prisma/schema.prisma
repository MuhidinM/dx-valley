// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
model collaborationOpportunity {
  id              Int      @id @default(autoincrement())
  Fullname        String
  email           String
  Phonenumber     String
  type            String
  category        String
  description     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Subscriber {
  id    Int    @id @default(autoincrement())
  email String @unique
}

model event {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  targetDate  DateTime
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  contests    contestParticipant[] // Relation to contestParticipant
  expos       expoParticipant[]    // Relation to expoParticipant
}

model contestParticipant {
  id                Int      @id @default(autoincrement())
  teamLeaderName    String
  email             String   @unique
  phoneNumber       String
  teamName          String   @unique
  numberOfMembers   Int
  teamMembers       String   
  projectTitle      String   @unique
  projectDescription String
  techStack         String?  
  projectUrl        String?  
  eventId            Int      // Foreign key to event
  event              event    @relation(fields: [eventId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model expoParticipant {
  id                      Int      @id @default(autoincrement())
  fullName                String
  email                   String
  phoneNumber             String
  companyName             String?
  jobTitle                String?
  participantType         String
  setupRequirements       String?
  presentationTitle       String?
  presentationAbstract    String?
  productName             String?
  productDescription      String?
  websiteUrl              String?
  eventId               Int      // Foreign key to event
  event                 event    @relation(fields: [eventId], references: [id])
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}
//  Design for collaboration opportunities
//  One to Many: One PersonalInfo can have multiple ContactInfo records
//  One to Many: One PersonalInfo can have multiple AddressInfo records
//  One to Many: One PersonalInfo can have multiple DocumentInfo records
//  One to Many: One OrganizationInfo can have multiple ContactInfo records
//  One to Many:One OrganizationInfo can have multiple AddressInfo records
//  One to Many: One OrganizationInfo can have multiple DocumentInfo records
//  Many to One: Each DocumentInfo record can reference either PersonalInfo or OrganizationInfo
//  One to one : One PersonalInfo can only have One OrganizationInfo 



model ContactInfo {
  id               Int             @id @default(autoincrement())
  email            String          @unique
  phoneNumberOne   String
  phoneNumberTwo   String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  
  // Foreign keys for relationships
  personalInfoId     Int?
  personalInfo       PersonalInfo?  @relation(fields: [personalInfoId], references: [id]) // Many-to-One: Links to PersonalInfo
  organizationInfoId Int?
  organizationInfo   OrganizationInfo? @relation(fields: [organizationInfoId], references: [id]) // Many-to-One: Links to OrganizationInfo
  MediaInfoId Int?
  MediaInfo   MediaInfo? @relation(fields: [MediaInfoId], references: [id]) // Many-to-One: Links to OrganizationInfo

}

model AddressInfo {
  id                Int             @id @default(autoincrement())
  city              String
  state             String
  country           String
  addressType       String?          // e.g., "Residential", "Business"
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  // Foreign keys for relationships
  personalInfoId     Int?
  personalInfo       PersonalInfo?  @relation(fields: [personalInfoId], references: [id]) // One-to-Many: Links to PersonalInfo
  organizationInfoId Int?
  organizationInfo   OrganizationInfo? @relation(fields: [organizationInfoId], references: [id]) // One-to-Many: Links to OrganizationInfo
  MediaInfoId Int?
  MediaInfo   MediaInfo? @relation(fields: [MediaInfoId], references: [id]) // Many-to-One: Links to OrganizationInfo
}

model OrganizationInfo {
  id               Int             @id @default(autoincrement())
  name             String
  industry         String          // Industry of the organization
  focusArea        String[]          // e.g., "AI", "FinTech", "AgroTech"
  interestArea     String[]          // e.g., "Invest", "Support"
  tradeLicense     String?
  organizationType String          // e.g., "NGO", "Private", "Government"
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  // Relationships
  contactInfo      ContactInfo[]   // One-to-Many: Multiple ContactInfo
  addressInfo      AddressInfo[]   // One-to-Many: Multiple AddressInfo
  documentInfo     DocumentInfo[]  // One-to-Many: Multiple DocumentInfo
  PersonalInfo PersonalInfo?
}
model PersonalInfo {
  id              Int              @id @default(autoincrement())
  title           String?         
  fullName        String
  lastName        String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relationships
  contactInfo     ContactInfo[]    // One-to-Many: Multiple ContactInfo
  addressInfo     AddressInfo[]    // One-to-Many: Multiple AddressInfo
  documentInfo    DocumentInfo[]   // One-to-Many: Multiple DocumentInfo
  organizationInfo OrganizationInfo? @relation(fields: [organizationInfoId], references: [id]) // One-to-One: OrganizationInfo
  organizationInfoId Int?  @unique        // Foreign key to OrganizationInfo
  
  TrainerInfo TrainerInfo?

  IndependentPartnerInfo IndependentPartnerInfo?
}
model DocumentInfo {
  id               Int              @id @default(autoincrement())
  documentType     String?           // e.g., "Trade License", "Patent"
  documentNumber   String?
  issuedDate       DateTime?
  expirationDate   DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Foreign keys for relationships with either PersonalInfo or OrganizationInfo
  personalInfoId     Int?
  personalInfo       PersonalInfo?  @relation(fields: [personalInfoId], references: [id])  // Many-to-One: PersonalInfo reference
  organizationInfoId Int?
  organizationInfo   OrganizationInfo? @relation(fields: [organizationInfoId], references: [id]) // Many-to-One: OrganizationInfo reference
  MediaInfoId Int?
  MediaInfo   MediaInfo? @relation(fields: [MediaInfoId], references: [id]) // Many-to-One: Links to OrganizationInfo
  TrainerInfoId Int?
  TrainerInfo TrainerInfo?@relation(fields: [TrainerInfoId], references: [id])

  IndependentPartnerInfoId  Int?
  IndependentPartnerInfo IndependentPartnerInfo?@relation(fields: [IndependentPartnerInfoId], references: [id])
}


model MediaInfo {
  id               Int             @id @default(autoincrement())
  name             String
  description      String
  platform         String           //radio, youtube,TV
  contentGenre     String          // e.g., "report", "podcast", "others"
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  // Relationships
  contactInfo      ContactInfo[]   // One-to-Many: Multiple ContactInfo
  addressInfo      AddressInfo[]   // One-to-Many: Multiple AddressInfo
  documentInfo     DocumentInfo[]  // One-to-Many: Multiple DocumentInfo
}

model TrainerInfo {
  id               Int             @id @default(autoincrement())
  title            String
  profession       String
  expertice        String
  schedule         String
  motivation       String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  // Relationships
  personalInfo PersonalInfo? @relation(fields: [personalInfoId], references: [id]) // One-to-One: Personal Info
  personalInfoId Int?  @unique    
  documentInfo     DocumentInfo[]  // One-to-Many: Multiple DocumentInfo

}

model IndependentPartnerInfo {
  id               Int             @id @default(autoincrement())
  focusArea        String          // e.g., "AI", "FinTech", "AgroTech"
  interestArea     String          // e.g., "Invest", "Support"
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  // Relationships
  personalInfo PersonalInfo? @relation(fields: [personalInfoId], references: [id]) // One-to-One: Personal Info
  personalInfoId Int?  @unique    
  documentInfo     DocumentInfo[]  // One-to-Many: Multiple DocumentInfo

}